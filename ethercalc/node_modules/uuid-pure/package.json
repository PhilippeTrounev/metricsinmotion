{
  "name": "uuid-pure",
  "author": {
    "name": "Aaron Blohowiak",
    "email": "aaron.blohowiak@gmail.com"
  },
  "description": "Random ID generator.  NOT RFC COMPLIANT!! (see: node-uuid)",
  "keywords": [
    "uuid",
    "random id"
  ],
  "version": "1.0.10",
  "homepage": "http://github.com/aaronblohowiak/Random-ID",
  "repository": {
    "type": "git",
    "url": "git://github.com/aaronblohowiak/Random-ID.git"
  },
  "scripts": {
    "test": "expresso"
  },
  "devDependencies": {
    "expresso": "0.7.0"
  },
  "main": "./uuid.js",
  "readme": "#Pure JavaScript random ID generation for browser and server.\n\nRandom-ID produces Base64-URI Encoded ids with 128 bits of random information.\n\nThese are roughly equivalent to UUIDs, but they do not have the correct formatting or special bits set.  If you're just looking for a quick way to generate a long random id that is uri-safe, then this library might be just what you needed =)\n\n> **This is not RFC4122 complaint!** Use [https://github.com/broofa/node-uuid](https://github.com/broofa/node-uuid) if you want RFC-Compliant UUIDs\n\n##USAGE: newId(length, radix)\n\n    length - the desired number of characters\n\n    radix  - the number of allowable values for each character, 64 by default.\n\n##INSTALLATION\n\n    npm install uuid-pure\n\n    var newId = require(\"uuid-pure\").newId;\n    \n##EXAMPLES:\n        // No arguments  - returns a 22 character long base64-uri random string\n        >>> newId()\n        'DPBCJL-P3trJvvqvvH2yOj'\n\n        // One argument - returns ID of the specified length\n        >>> newId(15)     // 15 character ID (default base=62)\n        '2oXmp_mD7WWA04T'\n\n        // Two arguments - returns ID of the specified length, and radix. (Radix must be <= 64)\n        >>> newId(8, 2)  // 8 character ID (base=2)\n        \"01001010\"\n        >>> newId(8, 10) // 8 character ID (base=10)\n        \"47473046\"\n        >>> newId(8, 16) // 8 character ID (base=16)\n        \"098F4D35\"\n\n##CONVENIENCE:\n\nIt is common to want to generate a new id that has a prefix.  To make that easier, uuid-pure comes with a currying function.\n        \n        >>> var uuid = require(\"uuid-pure\");\n        >>> var itemId = uuid.withPrefix(\"/item/\");\n        >>> itemId();\n        '/item/jkWk0RYLXqF6UUoF-RYvsb'\n\nCopyright (c) 2010 Aaron Blohowiak\nDual licensed under the MIT and GPL licenses.\n\n## Historical Note.\nThis library was previously called uuid-pure-js, and it is the npm package uuid-pure and not random-id for historical reasons.\n\nRobert Kieffer pointed out that this is not an RFC-compliant uuid and requested that I remove the attribution as the work is materially different than his original Math.uuid.js library.  If you're looking to work with systems that require an RFC-compliant UUID, please use his excellent node-uuid library which works on both the server and the browser.  For a faster (but requiring native code) solution, see [https://bitbucket.org/nikhilm/uuidjs](https://bitbucket.org/nikhilm/uuidjs).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aaronblohowiak/Random-ID/issues"
  },
  "_id": "uuid-pure@1.0.10",
  "_from": "uuid-pure@*"
}
